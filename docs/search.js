window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "TalkFlashcard-AI", "modulename": "TalkFlashcard-AI", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller", "modulename": "TalkFlashcard-AI.controller", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.add_module_controller", "modulename": "TalkFlashcard-AI.controller.add_module_controller", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.add_module_controller.AddModuleController", "modulename": "TalkFlashcard-AI.controller.add_module_controller", "qualname": "AddModuleController", "kind": "class", "doc": "<p>Controller for adding new modules to the application.\nManages the module addition popup and interaction with the database.</p>\n"}, {"fullname": "TalkFlashcard-AI.controller.add_module_controller.AddModuleController.__init__", "modulename": "TalkFlashcard-AI.controller.add_module_controller", "qualname": "AddModuleController.__init__", "kind": "function", "doc": "<p>Initializes the controller with the main window and parent view.</p>\n\n<p>Args:\n    main_window (tk.Tk): The main application window.\n    parent_view (tk.Frame): The parent view that will display modules.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">main_window</span>, </span><span class=\"param\"><span class=\"n\">parent_view</span></span>)</span>"}, {"fullname": "TalkFlashcard-AI.controller.add_module_controller.AddModuleController.main_window", "modulename": "TalkFlashcard-AI.controller.add_module_controller", "qualname": "AddModuleController.main_window", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.add_module_controller.AddModuleController.parent_view", "modulename": "TalkFlashcard-AI.controller.add_module_controller", "qualname": "AddModuleController.parent_view", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.add_module_controller.AddModuleController.db_service", "modulename": "TalkFlashcard-AI.controller.add_module_controller", "qualname": "AddModuleController.db_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.add_module_controller.AddModuleController.on_click", "modulename": "TalkFlashcard-AI.controller.add_module_controller", "qualname": "AddModuleController.on_click", "kind": "function", "doc": "<p>Opens the popup window to add a new module when clicked.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.add_module_controller.AddModuleController.open_add_module_popup", "modulename": "TalkFlashcard-AI.controller.add_module_controller", "qualname": "AddModuleController.open_add_module_popup", "kind": "function", "doc": "<p>Opens the popup window where the user can input the module name.\nAlso handles the positioning and UI elements.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.generate_flashcards_controller", "modulename": "TalkFlashcard-AI.controller.generate_flashcards_controller", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.generate_flashcards_controller.GenerateFlashcardsController", "modulename": "TalkFlashcard-AI.controller.generate_flashcards_controller", "qualname": "GenerateFlashcardsController", "kind": "class", "doc": "<p>Controller to manage the generation of flashcards using ChatGPT.\nHandles the creation of the flashcard generation popup, interaction with ChatGPT, and display of generated flashcards.</p>\n"}, {"fullname": "TalkFlashcard-AI.controller.generate_flashcards_controller.GenerateFlashcardsController.__init__", "modulename": "TalkFlashcard-AI.controller.generate_flashcards_controller", "qualname": "GenerateFlashcardsController.__init__", "kind": "function", "doc": "<p>Initializes the controller with necessary services and settings.</p>\n\n<p>Args:\n    main_window (tk.Tk): The main window of the application.\n    module (object): The module for which flashcards will be generated.\n    chatgpt_service (object): The ChatGPT service to generate flashcards.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">main_window</span>, </span><span class=\"param\"><span class=\"n\">module</span>, </span><span class=\"param\"><span class=\"n\">chatgpt_service</span></span>)</span>"}, {"fullname": "TalkFlashcard-AI.controller.generate_flashcards_controller.GenerateFlashcardsController.main_window", "modulename": "TalkFlashcard-AI.controller.generate_flashcards_controller", "qualname": "GenerateFlashcardsController.main_window", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.generate_flashcards_controller.GenerateFlashcardsController.module", "modulename": "TalkFlashcard-AI.controller.generate_flashcards_controller", "qualname": "GenerateFlashcardsController.module", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.generate_flashcards_controller.GenerateFlashcardsController.db_service", "modulename": "TalkFlashcard-AI.controller.generate_flashcards_controller", "qualname": "GenerateFlashcardsController.db_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.generate_flashcards_controller.GenerateFlashcardsController.chatgpt_service", "modulename": "TalkFlashcard-AI.controller.generate_flashcards_controller", "qualname": "GenerateFlashcardsController.chatgpt_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.generate_flashcards_controller.GenerateFlashcardsController.generate_flashcards_view", "modulename": "TalkFlashcard-AI.controller.generate_flashcards_controller", "qualname": "GenerateFlashcardsController.generate_flashcards_view", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.generate_flashcards_controller.GenerateFlashcardsController.open_generate_flashcards_popup", "modulename": "TalkFlashcard-AI.controller.generate_flashcards_controller", "qualname": "GenerateFlashcardsController.open_generate_flashcards_popup", "kind": "function", "doc": "<p>Opens a popup for generating flashcards using ChatGPT. Displays a text input area and handles the process of\ngenerating flashcards asynchronously.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.generate_flashcards_controller.GenerateFlashcardsController.show_flashcards_editor", "modulename": "TalkFlashcard-AI.controller.generate_flashcards_controller", "qualname": "GenerateFlashcardsController.show_flashcards_editor", "kind": "function", "doc": "<p>Displays a popup where the user can edit, delete, or save the generated flashcards.</p>\n\n<p>Args:\n    flashcards (list): List of generated flashcards to be displayed and edited.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flashcards</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.interactive_mode_controller", "modulename": "TalkFlashcard-AI.controller.interactive_mode_controller", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.interactive_mode_controller.InteractiveModeController", "modulename": "TalkFlashcard-AI.controller.interactive_mode_controller", "qualname": "InteractiveModeController", "kind": "class", "doc": "<p>Controller for interactive flashcard mode.\nManages the navigation and display of flashcards during study sessions.</p>\n"}, {"fullname": "TalkFlashcard-AI.controller.interactive_mode_controller.InteractiveModeController.__init__", "modulename": "TalkFlashcard-AI.controller.interactive_mode_controller", "qualname": "InteractiveModeController.__init__", "kind": "function", "doc": "<p>Initializes the controller with the main window and module.</p>\n\n<p>Args:\n    main_window (tk.Tk): The main application window.\n    module (object): The module for which flashcards will be displayed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">main_window</span>, </span><span class=\"param\"><span class=\"n\">module</span></span>)</span>"}, {"fullname": "TalkFlashcard-AI.controller.interactive_mode_controller.InteractiveModeController.main_window", "modulename": "TalkFlashcard-AI.controller.interactive_mode_controller", "qualname": "InteractiveModeController.main_window", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.interactive_mode_controller.InteractiveModeController.module", "modulename": "TalkFlashcard-AI.controller.interactive_mode_controller", "qualname": "InteractiveModeController.module", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.interactive_mode_controller.InteractiveModeController.db_service", "modulename": "TalkFlashcard-AI.controller.interactive_mode_controller", "qualname": "InteractiveModeController.db_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.interactive_mode_controller.InteractiveModeController.all_flashcards", "modulename": "TalkFlashcard-AI.controller.interactive_mode_controller", "qualname": "InteractiveModeController.all_flashcards", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.interactive_mode_controller.InteractiveModeController.current_index", "modulename": "TalkFlashcard-AI.controller.interactive_mode_controller", "qualname": "InteractiveModeController.current_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.interactive_mode_controller.InteractiveModeController.current_flashcard", "modulename": "TalkFlashcard-AI.controller.interactive_mode_controller", "qualname": "InteractiveModeController.current_flashcard", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.interactive_mode_controller.InteractiveModeController.reset_flashcards", "modulename": "TalkFlashcard-AI.controller.interactive_mode_controller", "qualname": "InteractiveModeController.reset_flashcards", "kind": "function", "doc": "<p>Resets the flashcard session, starting from the first flashcard.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.interactive_mode_controller.InteractiveModeController.get_next_flashcard", "modulename": "TalkFlashcard-AI.controller.interactive_mode_controller", "qualname": "InteractiveModeController.get_next_flashcard", "kind": "function", "doc": "<p>Returns the next flashcard in the sequence.</p>\n\n<p>Returns:\n    Flashcard or None: The next flashcard if available, otherwise None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.interactive_mode_controller.InteractiveModeController.move_to_next_flashcard", "modulename": "TalkFlashcard-AI.controller.interactive_mode_controller", "qualname": "InteractiveModeController.move_to_next_flashcard", "kind": "function", "doc": "<p>Moves to the next flashcard and updates the current flashcard.</p>\n\n<p>Returns:\n    Flashcard or None: The next flashcard if available, otherwise None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.interactive_mode_controller.InteractiveModeController.get_current_flashcard_answer", "modulename": "TalkFlashcard-AI.controller.interactive_mode_controller", "qualname": "InteractiveModeController.get_current_flashcard_answer", "kind": "function", "doc": "<p>Returns the answer of the current flashcard.</p>\n\n<p>Returns:\n    str or None: The answer of the current flashcard, or None if no flashcard is selected.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.interactive_mode_controller.InteractiveModeController.get_current_flashcard_question", "modulename": "TalkFlashcard-AI.controller.interactive_mode_controller", "qualname": "InteractiveModeController.get_current_flashcard_question", "kind": "function", "doc": "<p>Returns the question of the current flashcard.</p>\n\n<p>Returns:\n    str or None: The question of the current flashcard, or None if no flashcard is selected.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.module_controller", "modulename": "TalkFlashcard-AI.controller.module_controller", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.module_controller.ModuleController", "modulename": "TalkFlashcard-AI.controller.module_controller", "qualname": "ModuleController", "kind": "class", "doc": "<p>Controller for managing the module view and handling flashcard interactions.\nProvides functionality for adding and editing flashcards.</p>\n"}, {"fullname": "TalkFlashcard-AI.controller.module_controller.ModuleController.__init__", "modulename": "TalkFlashcard-AI.controller.module_controller", "qualname": "ModuleController.__init__", "kind": "function", "doc": "<p>Initializes the controller with the main window, module view, and optionally a module.</p>\n\n<p>Args:\n    main_window (tk.Tk): The main application window.\n    module_view (object): The view that displays flashcards for the module.\n    module (object, optional): The module for which flashcards are managed. Defaults to None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">main_window</span>, </span><span class=\"param\"><span class=\"n\">module_view</span>, </span><span class=\"param\"><span class=\"n\">module</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "TalkFlashcard-AI.controller.module_controller.ModuleController.main_window", "modulename": "TalkFlashcard-AI.controller.module_controller", "qualname": "ModuleController.main_window", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.module_controller.ModuleController.module_view", "modulename": "TalkFlashcard-AI.controller.module_controller", "qualname": "ModuleController.module_view", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.module_controller.ModuleController.module", "modulename": "TalkFlashcard-AI.controller.module_controller", "qualname": "ModuleController.module", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.module_controller.ModuleController.db_service", "modulename": "TalkFlashcard-AI.controller.module_controller", "qualname": "ModuleController.db_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.module_controller.ModuleController.set_module", "modulename": "TalkFlashcard-AI.controller.module_controller", "qualname": "ModuleController.set_module", "kind": "function", "doc": "<p>Sets the module for the controller.</p>\n\n<p>Args:\n    module (object): The module to be set.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">module</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.module_controller.ModuleController.add_flashcard_manually", "modulename": "TalkFlashcard-AI.controller.module_controller", "qualname": "ModuleController.add_flashcard_manually", "kind": "function", "doc": "<p>Opens a popup for adding a new flashcard manually to the module.\nThe user can enter a question and an answer for the new flashcard.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.module_controller.ModuleController.edit_flashcard", "modulename": "TalkFlashcard-AI.controller.module_controller", "qualname": "ModuleController.edit_flashcard", "kind": "function", "doc": "<p>Opens a popup for editing an existing flashcard.\nThe user can modify the question and answer of the selected flashcard.</p>\n\n<p>Args:\n    flashcard (object): The flashcard to be edited.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flashcard</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController", "kind": "class", "doc": "<p>Controller for managing the normal mode of flashcard learning.\nHandles loading flashcards, starting rounds, showing questions, and tracking results.</p>\n"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.__init__", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.__init__", "kind": "function", "doc": "<p>Initializes the controller with the main window and module.</p>\n\n<p>Args:\n    main_window (tk.Tk): The main application window.\n    module (object): The module for which flashcards will be displayed and tested.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">main_window</span>, </span><span class=\"param\"><span class=\"n\">module</span></span>)</span>"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.main_window", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.main_window", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.module", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.module", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.db_service", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.db_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.normal_mode_view", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.normal_mode_view", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.flashcards", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.flashcards", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.current_flashcard", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.current_flashcard", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.round", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.round", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.correct_answers", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.correct_answers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.incorrect_answers", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.incorrect_answers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.results_per_round", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.results_per_round", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.all_flashcards", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.all_flashcards", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.load_flashcards", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.load_flashcards", "kind": "function", "doc": "<p>Loads flashcards from the database for the current module.</p>\n\n<p>Returns:\n    bool: True if flashcards are loaded successfully, False if no flashcards are found.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.start_round", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.start_round", "kind": "function", "doc": "<p>Starts a new round by resetting the necessary variables and shuffling flashcards.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.end_round", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.end_round", "kind": "function", "doc": "<p>Ends the current round, calculates the success rate, and displays the results.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.show_question", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.show_question", "kind": "function", "doc": "<p>Displays the current flashcard question.\nIf there are no more flashcards, ends the round.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.show_answer", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.show_answer", "kind": "function", "doc": "<p>Displays the answer of the current flashcard.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.user_answered", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.user_answered", "kind": "function", "doc": "<p>Handles the user's answer. Updates the correct or incorrect answers list and shows the next question.</p>\n\n<p>Args:\n    correct (bool): Whether the user's answer was correct or not.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">correct</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.repeat_round", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.repeat_round", "kind": "function", "doc": "<p>Repeats the current round by restarting it.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.controller.normal_mode_controller.NormalModeController.finish_learning", "modulename": "TalkFlashcard-AI.controller.normal_mode_controller", "qualname": "NormalModeController.finish_learning", "kind": "function", "doc": "<p>Ends the learning session and shows the final results.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.main", "modulename": "TalkFlashcard-AI.main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.main.MainWindow", "modulename": "TalkFlashcard-AI.main", "qualname": "MainWindow", "kind": "class", "doc": "<p>The main window of the application, responsible for managing the GUI and the communication\nbetween different views, such as the main view and the module view.</p>\n", "bases": "tkinter.Tk"}, {"fullname": "TalkFlashcard-AI.main.MainWindow.__init__", "modulename": "TalkFlashcard-AI.main", "qualname": "MainWindow.__init__", "kind": "function", "doc": "<p>Initializes the main window, setting up services, frames, and UI elements.</p>\n\n<p>Sets up SSL context, API key handling, and initializes the database connection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "TalkFlashcard-AI.main.MainWindow.config_service", "modulename": "TalkFlashcard-AI.main", "qualname": "MainWindow.config_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.main.MainWindow.db_service", "modulename": "TalkFlashcard-AI.main", "qualname": "MainWindow.db_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.main.MainWindow.frames", "modulename": "TalkFlashcard-AI.main", "qualname": "MainWindow.frames", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.main.MainWindow.refresh_module_view", "modulename": "TalkFlashcard-AI.main", "qualname": "MainWindow.refresh_module_view", "kind": "function", "doc": "<p>Refreshes the module view with the selected module and its flashcards.</p>\n\n<p>Args:\n    module (object): The module to be displayed in the module view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">module</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.main.MainWindow.show_frame", "modulename": "TalkFlashcard-AI.main", "qualname": "MainWindow.show_frame", "kind": "function", "doc": "<p>Displays the specified frame.</p>\n\n<p>Args:\n    frame_name (str): The name of the frame to be displayed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">frame_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.main.MainWindow.open_module_view", "modulename": "TalkFlashcard-AI.main", "qualname": "MainWindow.open_module_view", "kind": "function", "doc": "<p>Opens the module view for the selected module.</p>\n\n<p>Args:\n    module (object): The module to be displayed in the module view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">module</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.main.MainWindow.on_closing", "modulename": "TalkFlashcard-AI.main", "qualname": "MainWindow.on_closing", "kind": "function", "doc": "<p>Handles the closing of the main window, closing database connection and destroying the window.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.main.MainWindow.create_api_key_button", "modulename": "TalkFlashcard-AI.main", "qualname": "MainWindow.create_api_key_button", "kind": "function", "doc": "<p>Creates a button in the bottom frame for managing the ChatGPT API key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.main.MainWindow.get_api_key_status", "modulename": "TalkFlashcard-AI.main", "qualname": "MainWindow.get_api_key_status", "kind": "function", "doc": "<p>Checks if the ChatGPT API key is set and returns a status message.</p>\n\n<p>Returns:\n    str: The status of the API key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.main.MainWindow.open_api_key_popup", "modulename": "TalkFlashcard-AI.main", "qualname": "MainWindow.open_api_key_popup", "kind": "function", "doc": "<p>Opens a popup window to input the ChatGPT API key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.models", "modulename": "TalkFlashcard-AI.models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.models.module_model", "modulename": "TalkFlashcard-AI.models.module_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.models.module_model.Module", "modulename": "TalkFlashcard-AI.models.module_model", "qualname": "Module", "kind": "class", "doc": "<p>Represents a module in the system.\nA module can have many flashcards associated with it.</p>\n"}, {"fullname": "TalkFlashcard-AI.models.module_model.Module.__init__", "modulename": "TalkFlashcard-AI.models.module_model", "qualname": "Module.__init__", "kind": "function", "doc": "<p>Initializes the module with its ID and name.</p>\n\n<p>Args:\n    module_id (int): The unique ID of the module.\n    name (str): The name of the module.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">module_id</span>, </span><span class=\"param\"><span class=\"n\">name</span></span>)</span>"}, {"fullname": "TalkFlashcard-AI.models.module_model.Module.id", "modulename": "TalkFlashcard-AI.models.module_model", "qualname": "Module.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.models.module_model.Module.name", "modulename": "TalkFlashcard-AI.models.module_model", "qualname": "Module.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.models.module_model.Flashcard", "modulename": "TalkFlashcard-AI.models.module_model", "qualname": "Flashcard", "kind": "class", "doc": "<p>Represents a flashcard in the system.\nA flashcard contains a question and an answer, and is associated with a module.</p>\n"}, {"fullname": "TalkFlashcard-AI.models.module_model.Flashcard.__init__", "modulename": "TalkFlashcard-AI.models.module_model", "qualname": "Flashcard.__init__", "kind": "function", "doc": "<p>Initializes the flashcard with its ID, associated module ID, question, and answer.</p>\n\n<p>Args:\n    flashcard_id (int): The unique ID of the flashcard.\n    module_id (int): The ID of the module this flashcard belongs to.\n    question (str): The question of the flashcard.\n    answer (str): The answer to the flashcard's question.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">flashcard_id</span>, </span><span class=\"param\"><span class=\"n\">module_id</span>, </span><span class=\"param\"><span class=\"n\">question</span>, </span><span class=\"param\"><span class=\"n\">answer</span></span>)</span>"}, {"fullname": "TalkFlashcard-AI.models.module_model.Flashcard.id", "modulename": "TalkFlashcard-AI.models.module_model", "qualname": "Flashcard.id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.models.module_model.Flashcard.module_id", "modulename": "TalkFlashcard-AI.models.module_model", "qualname": "Flashcard.module_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.models.module_model.Flashcard.question", "modulename": "TalkFlashcard-AI.models.module_model", "qualname": "Flashcard.question", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.models.module_model.Flashcard.answer", "modulename": "TalkFlashcard-AI.models.module_model", "qualname": "Flashcard.answer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.services", "modulename": "TalkFlashcard-AI.services", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.services.chatgpt_service", "modulename": "TalkFlashcard-AI.services.chatgpt_service", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.services.chatgpt_service.ChatGPTService", "modulename": "TalkFlashcard-AI.services.chatgpt_service", "qualname": "ChatGPTService", "kind": "class", "doc": "<p>Service for interacting with the OpenAI API to generate flashcards.\nThis service allows setting the API key and generating flashcards based on a text section.</p>\n"}, {"fullname": "TalkFlashcard-AI.services.chatgpt_service.ChatGPTService.__init__", "modulename": "TalkFlashcard-AI.services.chatgpt_service", "qualname": "ChatGPTService.__init__", "kind": "function", "doc": "<p>Initializes the ChatGPTService with a config service and an API key.</p>\n\n<p>Args:\n    config_service (ConfigService, optional): The configuration service for API key management.\n    api_key (str, optional): The API key for OpenAI. If not provided, it is fetched from the config service.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_service</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "TalkFlashcard-AI.services.chatgpt_service.ChatGPTService.config_service", "modulename": "TalkFlashcard-AI.services.chatgpt_service", "qualname": "ChatGPTService.config_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.services.chatgpt_service.ChatGPTService.api_key", "modulename": "TalkFlashcard-AI.services.chatgpt_service", "qualname": "ChatGPTService.api_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.services.chatgpt_service.ChatGPTService.set_api_key", "modulename": "TalkFlashcard-AI.services.chatgpt_service", "qualname": "ChatGPTService.set_api_key", "kind": "function", "doc": "<p>Sets a new API key for OpenAI and updates the configuration service if available.</p>\n\n<p>Args:\n    api_key (str): The new API key for OpenAI.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">api_key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.chatgpt_service.ChatGPTService.generate_flashcards", "modulename": "TalkFlashcard-AI.services.chatgpt_service", "qualname": "ChatGPTService.generate_flashcards", "kind": "function", "doc": "<p>Generates flashcards based on the provided text section using OpenAI's GPT model.</p>\n\n<p>Args:\n    text_section (str): The text section from which flashcards will be generated.</p>\n\n<p>Returns:\n    list: A list of generated flashcards, each containing a question and an answer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text_section</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.chatgpt_service.ChatGPTService.parse_flashcards", "modulename": "TalkFlashcard-AI.services.chatgpt_service", "qualname": "ChatGPTService.parse_flashcards", "kind": "function", "doc": "<p>Parses the generated text into a list of flashcards.</p>\n\n<p>Args:\n    generated_text (str): The text returned by the OpenAI API containing the flashcards.</p>\n\n<p>Returns:\n    list: A list of flashcards where each flashcard is a dictionary with 'question' and 'answer'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">generated_text</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.config_service", "modulename": "TalkFlashcard-AI.services.config_service", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.services.config_service.ConfigService", "modulename": "TalkFlashcard-AI.services.config_service", "qualname": "ConfigService", "kind": "class", "doc": "<p>Service for managing configuration settings for the application.\nHandles loading, saving, and retrieving configurations from a JSON file.</p>\n"}, {"fullname": "TalkFlashcard-AI.services.config_service.ConfigService.__init__", "modulename": "TalkFlashcard-AI.services.config_service", "qualname": "ConfigService.__init__", "kind": "function", "doc": "<p>Initializes the configuration service with the specified configuration file.</p>\n\n<p>Args:\n    config_file (str): The name of the configuration file. Defaults to 'config.json'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_file</span><span class=\"o\">=</span><span class=\"s1\">&#39;config.json&#39;</span></span>)</span>"}, {"fullname": "TalkFlashcard-AI.services.config_service.ConfigService.config_file", "modulename": "TalkFlashcard-AI.services.config_service", "qualname": "ConfigService.config_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.services.config_service.ConfigService.config", "modulename": "TalkFlashcard-AI.services.config_service", "qualname": "ConfigService.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.services.config_service.ConfigService.load_config", "modulename": "TalkFlashcard-AI.services.config_service", "qualname": "ConfigService.load_config", "kind": "function", "doc": "<p>Loads the configuration from the specified JSON file.\nIf the file does not exist or is invalid, creates a new configuration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.config_service.ConfigService.save_config", "modulename": "TalkFlashcard-AI.services.config_service", "qualname": "ConfigService.save_config", "kind": "function", "doc": "<p>Saves the current configuration to the specified JSON file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.config_service.ConfigService.get_api_key", "modulename": "TalkFlashcard-AI.services.config_service", "qualname": "ConfigService.get_api_key", "kind": "function", "doc": "<p>Retrieves the OpenAI API key from the configuration file or environment variables.</p>\n\n<p>Returns:\n    str or None: The API key if found, otherwise None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.config_service.ConfigService.set_api_key", "modulename": "TalkFlashcard-AI.services.config_service", "qualname": "ConfigService.set_api_key", "kind": "function", "doc": "<p>Updates the OpenAI API key in the configuration file.</p>\n\n<p>Args:\n    api_key (str): The new API key to be saved.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">api_key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.database_service", "modulename": "TalkFlashcard-AI.services.database_service", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.services.database_service.DatabaseService", "modulename": "TalkFlashcard-AI.services.database_service", "qualname": "DatabaseService", "kind": "class", "doc": "<p>Provides database operations for modules and flashcards.</p>\n"}, {"fullname": "TalkFlashcard-AI.services.database_service.DatabaseService.__init__", "modulename": "TalkFlashcard-AI.services.database_service", "qualname": "DatabaseService.__init__", "kind": "function", "doc": "<p>Initializes the database connection and tables.</p>\n\n<p>Args:\n    db_name (str): The database file name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;modules.db&#39;</span></span>)</span>"}, {"fullname": "TalkFlashcard-AI.services.database_service.DatabaseService.connection", "modulename": "TalkFlashcard-AI.services.database_service", "qualname": "DatabaseService.connection", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.services.database_service.DatabaseService.cursor", "modulename": "TalkFlashcard-AI.services.database_service", "qualname": "DatabaseService.cursor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.services.database_service.DatabaseService.create_modules_table", "modulename": "TalkFlashcard-AI.services.database_service", "qualname": "DatabaseService.create_modules_table", "kind": "function", "doc": "<p>Creates the modules table if it does not exist.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.database_service.DatabaseService.create_flashcards_table", "modulename": "TalkFlashcard-AI.services.database_service", "qualname": "DatabaseService.create_flashcards_table", "kind": "function", "doc": "<p>Creates the flashcards table if it does not exist.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.database_service.DatabaseService.get_all_modules", "modulename": "TalkFlashcard-AI.services.database_service", "qualname": "DatabaseService.get_all_modules", "kind": "function", "doc": "<p>Retrieves all modules from the database.</p>\n\n<p>Returns:\n    List[Module]: A list of Module objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.database_service.DatabaseService.add_module", "modulename": "TalkFlashcard-AI.services.database_service", "qualname": "DatabaseService.add_module", "kind": "function", "doc": "<p>Adds a new module to the database.</p>\n\n<p>Args:\n    module_name (str): The name of the module.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">module_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.database_service.DatabaseService.add_flashcard", "modulename": "TalkFlashcard-AI.services.database_service", "qualname": "DatabaseService.add_flashcard", "kind": "function", "doc": "<p>Adds a flashcard to a specific module.</p>\n\n<p>Args:\n    module_id (int): The ID of the module.\n    question (str): The question text.\n    answer (str): The answer text.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">module_id</span>, </span><span class=\"param\"><span class=\"n\">question</span>, </span><span class=\"param\"><span class=\"n\">answer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.database_service.DatabaseService.get_flashcards_by_module", "modulename": "TalkFlashcard-AI.services.database_service", "qualname": "DatabaseService.get_flashcards_by_module", "kind": "function", "doc": "<p>Retrieves all flashcards for a specific module.</p>\n\n<p>Args:\n    module_id (int): The ID of the module.</p>\n\n<p>Returns:\n    List[Flashcard]: A list of Flashcard objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">module_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.database_service.DatabaseService.update_flashcard", "modulename": "TalkFlashcard-AI.services.database_service", "qualname": "DatabaseService.update_flashcard", "kind": "function", "doc": "<p>Updates a specific flashcard.</p>\n\n<p>Args:\n    flashcard_id (int): The ID of the flashcard to update.\n    question (str): The updated question text.\n    answer (str): The updated answer text.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flashcard_id</span>, </span><span class=\"param\"><span class=\"n\">question</span>, </span><span class=\"param\"><span class=\"n\">answer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.database_service.DatabaseService.delete_module_with_flashcards", "modulename": "TalkFlashcard-AI.services.database_service", "qualname": "DatabaseService.delete_module_with_flashcards", "kind": "function", "doc": "<p>Deletes a module and all its associated flashcards.</p>\n\n<p>Args:\n    module_id (int): The ID of the module to delete.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">module_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.database_service.DatabaseService.delete_flashcards_by_module", "modulename": "TalkFlashcard-AI.services.database_service", "qualname": "DatabaseService.delete_flashcards_by_module", "kind": "function", "doc": "<p>Deletes all flashcards for a specific module.</p>\n\n<p>Args:\n    module_id (int): The ID of the module.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">module_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.database_service.DatabaseService.delete_flashcard", "modulename": "TalkFlashcard-AI.services.database_service", "qualname": "DatabaseService.delete_flashcard", "kind": "function", "doc": "<p>Deletes a specific flashcard.</p>\n\n<p>Args:\n    flashcard_id (int): The ID of the flashcard to delete.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flashcard_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.services.database_service.DatabaseService.close_connection", "modulename": "TalkFlashcard-AI.services.database_service", "qualname": "DatabaseService.close_connection", "kind": "function", "doc": "<p>Closes the database connection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.tests", "modulename": "TalkFlashcard-AI.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.tests.test_mic_access", "modulename": "TalkFlashcard-AI.tests.test_mic_access", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.tests.test_mic_access.test_microphone", "modulename": "TalkFlashcard-AI.tests.test_mic_access", "qualname": "test_microphone", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">record_seconds</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;./test_recorded.wav&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.utils", "modulename": "TalkFlashcard-AI.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.utils.check_flashcard_existence", "modulename": "TalkFlashcard-AI.utils.check_flashcard_existence", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.utils.check_flashcard_existence.check_flashcard_existence", "modulename": "TalkFlashcard-AI.utils.check_flashcard_existence", "qualname": "check_flashcard_existence", "kind": "function", "doc": "<p>Checks if any flashcards exist for the given module.</p>\n\n<p>Args:\n    db_service (DatabaseService): The database service used to query flashcards.\n    module_id (int): The ID of the module to check.</p>\n\n<p>Returns:\n    bool: True if flashcards exist for the module, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">db_service</span>, </span><span class=\"param\"><span class=\"n\">module_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.utils.mousewheel_scroll_util", "modulename": "TalkFlashcard-AI.utils.mousewheel_scroll_util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.utils.mousewheel_scroll_util.bind_mousewheel", "modulename": "TalkFlashcard-AI.utils.mousewheel_scroll_util", "qualname": "bind_mousewheel", "kind": "function", "doc": "<p>Binds the mouse wheel event to the canvas for vertical scrolling.\nHandles platform-specific differences in mouse wheel events.</p>\n\n<p>Args:\n    widget (tk.Widget): The widget to which the mouse wheel event is bound.\n    canvas (tk.Canvas): The canvas to scroll when the mouse wheel is used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">widget</span>, </span><span class=\"param\"><span class=\"n\">canvas</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.utils.right_click_util", "modulename": "TalkFlashcard-AI.utils.right_click_util", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.utils.right_click_util.bind_right_click", "modulename": "TalkFlashcard-AI.utils.right_click_util", "qualname": "bind_right_click", "kind": "function", "doc": "<p>Binds the right-click event to a widget, handling platform-specific differences.</p>\n\n<p>Args:\n    widget (tk.Widget): The widget to bind the right-click event to.\n    callback (function): The function to call when the right-click event happens.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">widget</span>, </span><span class=\"param\"><span class=\"n\">callback</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.utils.window_utils", "modulename": "TalkFlashcard-AI.utils.window_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.utils.window_utils.center_window", "modulename": "TalkFlashcard-AI.utils.window_utils", "qualname": "center_window", "kind": "function", "doc": "<p>Centers a child window relative to its parent window or the screen.</p>\n\n<p>Args:\n    parent (tk.Widget): The parent window to center the child window relative to.\n    child (tk.Widget): The child window to be centered.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">child</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views", "modulename": "TalkFlashcard-AI.views", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView", "kind": "class", "doc": "<p>This class provides an interactive learning view window for the user.\nIt manages a separate Tkinter Toplevel window and controls an interactive\nQ&amp;A session with speech recognition (STT) and text-to-speech (TTS).</p>\n\n<p>All user-facing texts are in German, while docstrings and comments are in English\nfor pdoc documentation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>main_window</strong>:  The main application window (parent) of this Toplevel window.</li>\n<li><strong>module</strong>:  The module (flashcard set) used in the interactive session.</li>\n<li><strong>controller</strong>:  An optional InteractiveModeController instance; if None, a new one is created.</li>\n</ul>\n", "bases": "tkinter.Toplevel"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.__init__", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.__init__", "kind": "function", "doc": "<p>Constructor method that initializes the interactive mode view and its UI components.\nAlso sets up session management variables, audio file paths, and event bindings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">main_window</span>, </span><span class=\"param\"><span class=\"n\">module</span>, </span><span class=\"param\"><span class=\"n\">controller</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.main_window", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.main_window", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.module", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.module", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.controller", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.controller", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.config_service", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.config_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.api_key", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.api_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.session_data", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.session_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.attempts", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.attempts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.playback_process", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.playback_process", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.max_attempts", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.max_attempts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.current_attempt", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.current_attempt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.current_flashcard", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.current_flashcard", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.speech_speed", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.speech_speed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.is_listening", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.is_listening", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.is_speaking", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.is_speaking", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.is_transcribing", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.is_transcribing", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.recording", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.recording", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.window_closed", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.window_closed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.summary", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.summary", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.audio_dir", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.audio_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.speech_file_path", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.speech_file_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.recorded_audio_path", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.recorded_audio_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.chat_frame", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.chat_frame", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.start_button", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.start_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.stop_button", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.stop_button", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.on_space_pressed", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.on_space_pressed", "kind": "function", "doc": "<p>This method is triggered when the space key is pressed.</p>\n\n<p>Logic:</p>\n\n<ul>\n<li>If TTS (is_speaking) or STT (is_transcribing) is active, ignore the space press.</li>\n<li>If we are not currently recording, ignore the space press.</li>\n<li>Otherwise, stop the recording to accept the user's answer early.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.start_interactive_mode", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.start_interactive_mode", "kind": "function", "doc": "<p>Starts the interactive learning mode.\nResets flashcards, clears summaries, and begins the first question.\nAlso provides a spoken introduction to the user in German.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.stop_interactive_mode", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.stop_interactive_mode", "kind": "function", "doc": "<p>Stops the interactive mode gracefully.\nHalts any ongoing recording or speech playback, generates a summary,\nand closes the current window, displaying a summary popup afterwards.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.ask_next_question", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.ask_next_question", "kind": "function", "doc": "<p>Fetches the next flashcard question.\nIf no more flashcards are available, prompts the user to repeat or end the session.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.prompt_for_repeat", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.prompt_for_repeat", "kind": "function", "doc": "<p>Asks the user if they want to repeat the flashcards.\nCreates two buttons in the chat (Ja/Nein).\nIf 'Ja', flashcards are reset. If 'Nein', the session ends.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.speak_text", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.speak_text", "kind": "function", "doc": "<p>Converts the given text into speech (TTS) using OpenAI (model='tts-1')\nand plays it back via a platform-specific audio player.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>text</strong>:  The text to be spoken in German.</li>\n<li><strong>callback</strong>:  A callable executed after speech playback finishes.</li>\n<li><strong>listen_after_speech</strong>:  If True, listening for a user answer starts automatically.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">listen_after_speech</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.listen_for_answer", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.listen_for_answer", "kind": "function", "doc": "<p>Starts listening for the user's spoken answer.\nRecords up to 60 seconds of audio at 48 kHz, then transcribes the result with Whisper.</p>\n\n<p>We do NOT set is_transcribing to True until AFTER the recording ends,\nso the user can press space to stop early.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.stop_recording", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.stop_recording", "kind": "function", "doc": "<p>Stops the current recording if it is in progress.\nLogs a message and updates the UI accordingly.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.evaluate_response", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.evaluate_response", "kind": "function", "doc": "<p>Evaluates the user's response against the correct flashcard answer.\nCalls the assistant to rate the user's answer and provides feedback/hints\nor reveals the correct answer.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>user_response</strong>:  The transcribed user response.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user_response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.generate_summary", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.generate_summary", "kind": "function", "doc": "<p>Generates a summary of the entire session, listing which questions were answered\n'gut', 'mittel', or 'schlecht'. This text is inserted into the chat and also used\nby a popup after the session ends.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.show_summary_popup", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.show_summary_popup", "kind": "function", "doc": "<p>Displays the summary popup after the window is closed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.stop_listening", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.stop_listening", "kind": "function", "doc": "<p>Interrupts the current listening process if it is active,\nforcing the recording to stop.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.display_message", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.display_message", "kind": "function", "doc": "<p>Displays a given message in the chat frame with a given sender label.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong>:  The text to display.</li>\n<li><strong>sender</strong>:  The role of the message sender (e.g., 'Nutzer', 'KI-Lernpartner', 'System').</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"n\">sender</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.safe_display_message", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.safe_display_message", "kind": "function", "doc": "<p>Safely displays a message on the Tkinter event loop thread to avoid concurrency issues.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span>, </span><span class=\"param\"><span class=\"n\">sender</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.interactive_mode_view.InteractiveModeView.on_closing", "modulename": "TalkFlashcard-AI.views.interactive_mode_view", "qualname": "InteractiveModeView.on_closing", "kind": "function", "doc": "<p>Handles the window closing event.\nStops any ongoing processes, generates a summary, and then destroys this window.\nFinally, it shows the summary popup and cleans up any temporary audio files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.main_view", "modulename": "TalkFlashcard-AI.views.main_view", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.main_view.MainView", "modulename": "TalkFlashcard-AI.views.main_view", "qualname": "MainView", "kind": "class", "doc": "<p>The main view of the application. Displays the available modules and allows users to manage them.</p>\n", "bases": "tkinter.Frame"}, {"fullname": "TalkFlashcard-AI.views.main_view.MainView.__init__", "modulename": "TalkFlashcard-AI.views.main_view", "qualname": "MainView.__init__", "kind": "function", "doc": "<p>Initializes the main view.</p>\n\n<p>Args:\n    parent (tk.Widget): The parent widget for this view.\n    controller (object): The main controller of the application.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">controller</span></span>)</span>"}, {"fullname": "TalkFlashcard-AI.views.main_view.MainView.add_module_controller", "modulename": "TalkFlashcard-AI.views.main_view", "qualname": "MainView.add_module_controller", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.main_view.MainView.controller", "modulename": "TalkFlashcard-AI.views.main_view", "qualname": "MainView.controller", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.main_view.MainView.db_service", "modulename": "TalkFlashcard-AI.views.main_view", "qualname": "MainView.db_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.main_view.MainView.create_widgets", "modulename": "TalkFlashcard-AI.views.main_view", "qualname": "MainView.create_widgets", "kind": "function", "doc": "<p>Creates and arranges all widgets in the main view.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.main_view.MainView.display_modules", "modulename": "TalkFlashcard-AI.views.main_view", "qualname": "MainView.display_modules", "kind": "function", "doc": "<p>Displays all modules in the database as buttons. Each button corresponds to a module.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.main_view.MainView.create_context_menu", "modulename": "TalkFlashcard-AI.views.main_view", "qualname": "MainView.create_context_menu", "kind": "function", "doc": "<p>Creates a right-click context menu for a module button.</p>\n\n<p>Args:\n    module_button (tk.Widget): The button representing the module.\n    module (object): The module associated with the button.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">module_button</span>, </span><span class=\"param\"><span class=\"n\">module</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.main_view.MainView.delete_module", "modulename": "TalkFlashcard-AI.views.main_view", "qualname": "MainView.delete_module", "kind": "function", "doc": "<p>Deletes a module along with all its flashcards after confirmation.</p>\n\n<p>Args:\n    module (object): The module to be deleted.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">module</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.main_view.MainView.delete_flashcards", "modulename": "TalkFlashcard-AI.views.main_view", "qualname": "MainView.delete_flashcards", "kind": "function", "doc": "<p>Deletes all flashcards in a module after confirmation.</p>\n\n<p>Args:\n    module (object): The module whose flashcards will be deleted.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">module</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.module_view", "modulename": "TalkFlashcard-AI.views.module_view", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView", "kind": "class", "doc": "<p>This class represents the view for a specific module, displaying its flashcards\nand options for interacting with the module in various modes.</p>\n", "bases": "tkinter.Frame"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.__init__", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.__init__", "kind": "function", "doc": "<p>Initializes the view for the module, setting up necessary widgets.</p>\n\n<p>Args:\n    parent (tk.Widget): The parent widget (window).\n    controller (object): The main controller of the application.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parent</span>, </span><span class=\"param\"><span class=\"n\">controller</span></span>)</span>"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.controller", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.controller", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.db_service", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.db_service", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.module", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.module", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.flashcards_options_visible", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.flashcards_options_visible", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.module_controller", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.module_controller", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.max_frage_length", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.max_frage_length", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.max_antwort_length", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.max_antwort_length", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.truncate_text", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.truncate_text", "kind": "function", "doc": "<p>Truncates the given text to the specified length, ensuring no line breaks.</p>\n\n<p>Args:\n    text (str): The text to be truncated.\n    max_length (int): The maximum length of the text.</p>\n\n<p>Returns:\n    str: The truncated text.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">max_length</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.create_widgets", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.create_widgets", "kind": "function", "doc": "<p>Creates and arranges all the widgets for displaying the module and its flashcards.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.set_module", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.set_module", "kind": "function", "doc": "<p>Sets the module for this view and updates the display.</p>\n\n<p>Args:\n    module (object): The module to be set.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">module</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.update_module_label", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.update_module_label", "kind": "function", "doc": "<p>Updates the label showing the current module name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.toggle_flashcards_options", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.toggle_flashcards_options", "kind": "function", "doc": "<p>Toggles the visibility of the flashcards options frame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.create_flashcards_options", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.create_flashcards_options", "kind": "function", "doc": "<p>Creates options for adding or generating flashcards.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.open_generate_flashcards", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.open_generate_flashcards", "kind": "function", "doc": "<p>Opens the popup for generating flashcards using ChatGPT.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.display_flashcards", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.display_flashcards", "kind": "function", "doc": "<p>Displays all flashcards for the current module in the treeview.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.on_right_click", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.on_right_click", "kind": "function", "doc": "<p>Displays the right-click context menu for deleting selected flashcards.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.delete_selected_flashcards", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.delete_selected_flashcards", "kind": "function", "doc": "<p>Deletes selected flashcards after confirmation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.on_double_click", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.on_double_click", "kind": "function", "doc": "<p>Edits the selected flashcard on a double-click event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.start_interactive_mode", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.start_interactive_mode", "kind": "function", "doc": "<p>Starts the interactive learning mode if flashcards are available.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.module_view.ModuleView.start_normal_mode", "modulename": "TalkFlashcard-AI.views.module_view", "qualname": "ModuleView.start_normal_mode", "kind": "function", "doc": "<p>Starts the normal learning mode if flashcards are available.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView", "kind": "class", "doc": "<p>View for the normal learning mode, where users can see questions and provide answers.</p>\n", "bases": "tkinter.Toplevel"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.__init__", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.__init__", "kind": "function", "doc": "<p>Initializes the view for the normal learning mode.</p>\n\n<p>Args:\n    main_window (tk.Tk): The main window of the application.\n    controller (object): The controller managing the learning mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">main_window</span>, </span><span class=\"param\"><span class=\"n\">controller</span></span>)</span>"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.main_window", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.main_window", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.controller", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.controller", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.answer_shown", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.answer_shown", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.is_summary_displayed", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.is_summary_displayed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.buttons_active", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.buttons_active", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.summary_widgets", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.summary_widgets", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.create_widgets", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.create_widgets", "kind": "function", "doc": "<p>Creates the widgets for displaying questions, answers, and buttons for user interactions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.bind_events", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.bind_events", "kind": "function", "doc": "<p>Binds keyboard events for answering the questions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.on_space_press", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.on_space_press", "kind": "function", "doc": "<p>Handles the space key press to show the answer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.display_question", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.display_question", "kind": "function", "doc": "<p>Displays the question and prepares for the answer.</p>\n\n<p>Args:\n    question (str): The question to be displayed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">question</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.display_answer", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.display_answer", "kind": "function", "doc": "<p>Displays the answer and shows the response options.</p>\n\n<p>Args:\n    answer (str): The answer to be displayed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">answer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.on_number_key_press", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.on_number_key_press", "kind": "function", "doc": "<p>Handles number key presses to select the answer.</p>\n\n<p>Args:\n    number (int): The number of the key pressed (1 or 2).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.clear_buttons", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.clear_buttons", "kind": "function", "doc": "<p>Clears any displayed buttons (answer buttons and options).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.clear_summary_widgets", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.clear_summary_widgets", "kind": "function", "doc": "<p>Clears any widgets related to the summary display.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.show_round_summary", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.show_round_summary", "kind": "function", "doc": "<p>Displays the summary of the current round with statistics.</p>\n\n<p>Args:\n    correct_answers (list): List of correctly answered questions.\n    incorrect_answers (list): List of incorrectly answered questions.\n    success_rate (float): The success rate of the round.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">correct_answers</span>, </span><span class=\"param\"><span class=\"n\">incorrect_answers</span>, </span><span class=\"param\"><span class=\"n\">success_rate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.show_final_results", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.show_final_results", "kind": "function", "doc": "<p>Displays the final results of the learning session.</p>\n\n<p>Args:\n    results_per_round (list): List of results from each round.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">results_per_round</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "TalkFlashcard-AI.views.normal_mode_view.NormalModeView.on_closing", "modulename": "TalkFlashcard-AI.views.normal_mode_view", "qualname": "NormalModeView.on_closing", "kind": "function", "doc": "<p>Handles the closing of the view, unbinds events and destroys the window.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();